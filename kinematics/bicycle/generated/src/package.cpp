
// AUTO GENERATED by vnxcppcodegen

#include <pilot/kinematics/bicycle/DriveCmd.hxx>
#include <pilot/kinematics/bicycle/DriveState.hxx>

#include <pilot/kinematics/bicycle/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

void type<::pilot::kinematics::bicycle::DriveCmd>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::pilot::kinematics::bicycle::DriveCmd());
}

void type<::pilot::kinematics::bicycle::DriveCmd>::create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::kinematics::bicycle::DriveCmd& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::pilot::kinematics::bicycle::DriveState>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::pilot::kinematics::bicycle::DriveState());
}

void type<::pilot::kinematics::bicycle::DriveState>::create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::kinematics::bicycle::DriveState& value, bool special) {
	code.push_back(CODE_OBJECT);
}


} // namespace vnx


namespace pilot {
namespace kinematics {
namespace bicycle {


static void register_all_types() {
	vnx::register_type_code(::pilot::kinematics::bicycle::DriveCmd::static_create_type_code());
	vnx::register_type_code(::pilot::kinematics::bicycle::DriveState::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_DriveCmd = vnx::get_type_code(vnx::Hash64(0xf004b05b8afaf819ull));
const vnx::TypeCode* const vnx_native_type_code_DriveState = vnx::get_type_code(vnx::Hash64(0x5c1d7427a54840d3ull));

} // namespace pilot
} // namespace kinematics
} // namespace bicycle
