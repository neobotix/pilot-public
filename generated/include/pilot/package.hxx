
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_PACKAGE_HXX_
#define INCLUDE_pilot_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace pilot {


class BatteryState;
class EmergencyState;
class Event;
class IOBoardData;
class Incident;
class ModuleLauncher;
class ModuleLauncher_add;
class ModuleLauncher_add_return;
class ModuleLauncher_get_names;
class ModuleLauncher_get_names_return;
class ModuleLauncher_launch;
class ModuleLauncher_launch_return;
class ModuleLauncher_stop;
class ModuleLauncher_stop_return;
class ModuleLauncher_stop_all;
class ModuleLauncher_stop_all_return;
class PlatformInterface;
class PlatformInterface_charge;
class PlatformInterface_charge_return;
class PlatformInterface_read_analog_input;
class PlatformInterface_read_analog_input_return;
class PlatformInterface_read_digital_input;
class PlatformInterface_read_digital_input_return;
class PlatformInterface_set_digital_output;
class PlatformInterface_set_digital_output_return;
class PlatformInterface_set_display_text;
class PlatformInterface_set_display_text_return;
class PlatformInterface_set_led;
class PlatformInterface_set_led_return;
class PlatformInterface_set_leds;
class PlatformInterface_set_leds_return;
class PlatformInterface_set_relay;
class PlatformInterface_set_relay_return;
class PlatformInterface_shutdown;
class PlatformInterface_shutdown_return;
class PlatformInterface_start_charging;
class PlatformInterface_start_charging_return;
class PlatformInterface_stop_charging;
class PlatformInterface_stop_charging_return;
class PlatformInterface_wait_for_digital_input;
class PlatformInterface_wait_for_digital_input_return;
class PowerState;
class RelayBoardData;
class RelayBoardV3Data;
class SafetyInterface;
class SafetyInterface_select_safety_field;
class SafetyInterface_select_safety_field_return;
class SafetyState;
class SystemState;
class USBoardData;
struct battery_code_e;
struct battery_type_e;
struct charging_state_e;
struct em_stop_state_e;
struct event_t;
struct event_type_e;
struct keypad_state_t;
struct kinematic_type_e;
struct led_color_e;
struct permission_e;
struct power_system_type_e;
struct safety_code_e;
struct system_error_e;

extern const vnx::TypeCode* const vnx_native_type_code_BatteryState; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_EmergencyState; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Event; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_IOBoardData; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Incident; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_add; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_add_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_get_names; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_get_names_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_launch; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_launch_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_stop; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_stop_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_stop_all; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ModuleLauncher_stop_all_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_charge; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_charge_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_read_analog_input; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_read_analog_input_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_read_digital_input; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_read_digital_input_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_digital_output; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_digital_output_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_display_text; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_display_text_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_led; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_led_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_leds; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_leds_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_relay; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_set_relay_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_shutdown; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_shutdown_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_start_charging; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_start_charging_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_stop_charging; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_stop_charging_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_wait_for_digital_input; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PlatformInterface_wait_for_digital_input_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PowerState; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RelayBoardData; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RelayBoardV3Data; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SafetyInterface_select_safety_field; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SafetyInterface_select_safety_field_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SafetyState; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SystemState; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_USBoardData; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_battery_code_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_battery_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_charging_state_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_em_stop_state_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_event_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_event_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_keypad_state_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_kinematic_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_led_color_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_permission_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_power_system_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_safety_code_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_system_error_e; ///< \private

} // namespace pilot


namespace vnx {

void read(TypeInput& in, ::pilot::BatteryState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::EmergencyState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::Event& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::IOBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::Incident& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_add& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_add_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_get_names& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_get_names_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_launch& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_launch_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_stop& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_stop_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_stop_all& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::ModuleLauncher_stop_all_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_charge& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_charge_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_read_analog_input& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_read_analog_input_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_read_digital_input& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_read_digital_input_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_digital_output& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_digital_output_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_display_text& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_display_text_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_led& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_led_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_leds& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_leds_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_relay& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_set_relay_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_shutdown& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_shutdown_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_start_charging& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_start_charging_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_stop_charging& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_stop_charging_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_wait_for_digital_input& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PlatformInterface_wait_for_digital_input_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::PowerState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::RelayBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::RelayBoardV3Data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::SafetyInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::SafetyInterface_select_safety_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::SafetyInterface_select_safety_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::SafetyState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::SystemState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::USBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::battery_code_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::battery_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::charging_state_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::em_stop_state_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::event_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::event_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::keypad_state_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::kinematic_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::led_color_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::power_system_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::safety_code_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::system_error_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::pilot::BatteryState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::EmergencyState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::Event& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::IOBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::Incident& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_add& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_add_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_get_names& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_get_names_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_launch& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_launch_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop_all& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop_all_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_charge& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_charge_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_read_analog_input& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_read_analog_input_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_read_digital_input& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_read_digital_input_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_digital_output& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_digital_output_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_display_text& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_display_text_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_led& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_led_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_leds& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_leds_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_relay& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_set_relay_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_shutdown& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_shutdown_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_start_charging& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_start_charging_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_stop_charging& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_stop_charging_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_wait_for_digital_input& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PlatformInterface_wait_for_digital_input_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::PowerState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::RelayBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::RelayBoardV3Data& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::SafetyInterface& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::SafetyInterface_select_safety_field& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::SafetyInterface_select_safety_field_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::SafetyState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::SystemState& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::USBoardData& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::battery_code_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::battery_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::charging_state_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::em_stop_state_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::event_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::event_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::keypad_state_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::kinematic_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::led_color_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::power_system_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::safety_code_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::system_error_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::pilot::BatteryState& value); ///< \private
void read(std::istream& in, ::pilot::EmergencyState& value); ///< \private
void read(std::istream& in, ::pilot::Event& value); ///< \private
void read(std::istream& in, ::pilot::IOBoardData& value); ///< \private
void read(std::istream& in, ::pilot::Incident& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_add& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_add_return& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_get_names& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_get_names_return& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_launch& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_launch_return& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_stop& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_stop_return& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_stop_all& value); ///< \private
void read(std::istream& in, ::pilot::ModuleLauncher_stop_all_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_charge& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_charge_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_read_analog_input& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_read_analog_input_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_read_digital_input& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_read_digital_input_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_digital_output& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_digital_output_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_display_text& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_display_text_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_led& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_led_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_leds& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_leds_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_relay& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_set_relay_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_shutdown& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_shutdown_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_start_charging& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_start_charging_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_stop_charging& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_stop_charging_return& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_wait_for_digital_input& value); ///< \private
void read(std::istream& in, ::pilot::PlatformInterface_wait_for_digital_input_return& value); ///< \private
void read(std::istream& in, ::pilot::PowerState& value); ///< \private
void read(std::istream& in, ::pilot::RelayBoardData& value); ///< \private
void read(std::istream& in, ::pilot::RelayBoardV3Data& value); ///< \private
void read(std::istream& in, ::pilot::SafetyInterface& value); ///< \private
void read(std::istream& in, ::pilot::SafetyInterface_select_safety_field& value); ///< \private
void read(std::istream& in, ::pilot::SafetyInterface_select_safety_field_return& value); ///< \private
void read(std::istream& in, ::pilot::SafetyState& value); ///< \private
void read(std::istream& in, ::pilot::SystemState& value); ///< \private
void read(std::istream& in, ::pilot::USBoardData& value); ///< \private
void read(std::istream& in, ::pilot::battery_code_e& value); ///< \private
void read(std::istream& in, ::pilot::battery_type_e& value); ///< \private
void read(std::istream& in, ::pilot::charging_state_e& value); ///< \private
void read(std::istream& in, ::pilot::em_stop_state_e& value); ///< \private
void read(std::istream& in, ::pilot::event_t& value); ///< \private
void read(std::istream& in, ::pilot::event_type_e& value); ///< \private
void read(std::istream& in, ::pilot::keypad_state_t& value); ///< \private
void read(std::istream& in, ::pilot::kinematic_type_e& value); ///< \private
void read(std::istream& in, ::pilot::led_color_e& value); ///< \private
void read(std::istream& in, ::pilot::permission_e& value); ///< \private
void read(std::istream& in, ::pilot::power_system_type_e& value); ///< \private
void read(std::istream& in, ::pilot::safety_code_e& value); ///< \private
void read(std::istream& in, ::pilot::system_error_e& value); ///< \private

void write(std::ostream& out, const ::pilot::BatteryState& value); ///< \private
void write(std::ostream& out, const ::pilot::EmergencyState& value); ///< \private
void write(std::ostream& out, const ::pilot::Event& value); ///< \private
void write(std::ostream& out, const ::pilot::IOBoardData& value); ///< \private
void write(std::ostream& out, const ::pilot::Incident& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_add& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_add_return& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_get_names& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_get_names_return& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_launch& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_launch_return& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_stop& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_stop_return& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_stop_all& value); ///< \private
void write(std::ostream& out, const ::pilot::ModuleLauncher_stop_all_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_charge& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_charge_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_read_analog_input& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_read_analog_input_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_read_digital_input& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_read_digital_input_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_digital_output& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_digital_output_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_display_text& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_display_text_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_led& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_led_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_leds& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_leds_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_relay& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_set_relay_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_shutdown& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_shutdown_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_start_charging& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_start_charging_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_stop_charging& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_stop_charging_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_wait_for_digital_input& value); ///< \private
void write(std::ostream& out, const ::pilot::PlatformInterface_wait_for_digital_input_return& value); ///< \private
void write(std::ostream& out, const ::pilot::PowerState& value); ///< \private
void write(std::ostream& out, const ::pilot::RelayBoardData& value); ///< \private
void write(std::ostream& out, const ::pilot::RelayBoardV3Data& value); ///< \private
void write(std::ostream& out, const ::pilot::SafetyInterface& value); ///< \private
void write(std::ostream& out, const ::pilot::SafetyInterface_select_safety_field& value); ///< \private
void write(std::ostream& out, const ::pilot::SafetyInterface_select_safety_field_return& value); ///< \private
void write(std::ostream& out, const ::pilot::SafetyState& value); ///< \private
void write(std::ostream& out, const ::pilot::SystemState& value); ///< \private
void write(std::ostream& out, const ::pilot::USBoardData& value); ///< \private
void write(std::ostream& out, const ::pilot::battery_code_e& value); ///< \private
void write(std::ostream& out, const ::pilot::battery_type_e& value); ///< \private
void write(std::ostream& out, const ::pilot::charging_state_e& value); ///< \private
void write(std::ostream& out, const ::pilot::em_stop_state_e& value); ///< \private
void write(std::ostream& out, const ::pilot::event_t& value); ///< \private
void write(std::ostream& out, const ::pilot::event_type_e& value); ///< \private
void write(std::ostream& out, const ::pilot::keypad_state_t& value); ///< \private
void write(std::ostream& out, const ::pilot::kinematic_type_e& value); ///< \private
void write(std::ostream& out, const ::pilot::led_color_e& value); ///< \private
void write(std::ostream& out, const ::pilot::permission_e& value); ///< \private
void write(std::ostream& out, const ::pilot::power_system_type_e& value); ///< \private
void write(std::ostream& out, const ::pilot::safety_code_e& value); ///< \private
void write(std::ostream& out, const ::pilot::system_error_e& value); ///< \private

void accept(Visitor& visitor, const ::pilot::BatteryState& value); ///< \private
void accept(Visitor& visitor, const ::pilot::EmergencyState& value); ///< \private
void accept(Visitor& visitor, const ::pilot::Event& value); ///< \private
void accept(Visitor& visitor, const ::pilot::IOBoardData& value); ///< \private
void accept(Visitor& visitor, const ::pilot::Incident& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_add& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_add_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_get_names& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_get_names_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_launch& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_launch_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop_all& value); ///< \private
void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop_all_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_charge& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_charge_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_analog_input& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_analog_input_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_digital_input& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_digital_input_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_digital_output& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_digital_output_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_display_text& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_display_text_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_led& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_led_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_leds& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_leds_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_relay& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_relay_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_shutdown& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_shutdown_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_start_charging& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_start_charging_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_stop_charging& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_stop_charging_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_wait_for_digital_input& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PlatformInterface_wait_for_digital_input_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::PowerState& value); ///< \private
void accept(Visitor& visitor, const ::pilot::RelayBoardData& value); ///< \private
void accept(Visitor& visitor, const ::pilot::RelayBoardV3Data& value); ///< \private
void accept(Visitor& visitor, const ::pilot::SafetyInterface& value); ///< \private
void accept(Visitor& visitor, const ::pilot::SafetyInterface_select_safety_field& value); ///< \private
void accept(Visitor& visitor, const ::pilot::SafetyInterface_select_safety_field_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::SafetyState& value); ///< \private
void accept(Visitor& visitor, const ::pilot::SystemState& value); ///< \private
void accept(Visitor& visitor, const ::pilot::USBoardData& value); ///< \private
void accept(Visitor& visitor, const ::pilot::battery_code_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::battery_type_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::charging_state_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::em_stop_state_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::event_t& value); ///< \private
void accept(Visitor& visitor, const ::pilot::event_type_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::keypad_state_t& value); ///< \private
void accept(Visitor& visitor, const ::pilot::kinematic_type_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::led_color_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::permission_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::power_system_type_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::safety_code_e& value); ///< \private
void accept(Visitor& visitor, const ::pilot::system_error_e& value); ///< \private

/// \private
template<>
struct type<::pilot::BatteryState> {
	void read(TypeInput& in, ::pilot::BatteryState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::BatteryState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::BatteryState& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::BatteryState& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::BatteryState& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::BatteryState& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::EmergencyState> {
	void read(TypeInput& in, ::pilot::EmergencyState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::EmergencyState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::EmergencyState& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::EmergencyState& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::EmergencyState& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::EmergencyState& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::Event> {
	void read(TypeInput& in, ::pilot::Event& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::Event& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::Event& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::Event& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::Event& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::Event& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::IOBoardData> {
	void read(TypeInput& in, ::pilot::IOBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::IOBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::IOBoardData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::IOBoardData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::IOBoardData& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::IOBoardData& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::Incident> {
	void read(TypeInput& in, ::pilot::Incident& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::Incident& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::Incident& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::Incident& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::Incident& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::Incident& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher> {
	void read(TypeInput& in, ::pilot::ModuleLauncher& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_add> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_add& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_add& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_add& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_add& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_add& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_add& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_add_return> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_add_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_add_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_add_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_add_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_add_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_add_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_get_names> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_get_names& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_get_names& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_get_names& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_get_names& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_get_names& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_get_names& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_get_names_return> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_get_names_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_get_names_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_get_names_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_get_names_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_get_names_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_get_names_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_launch> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_launch& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_launch& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_launch& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_launch& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_launch& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_launch& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_launch_return> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_launch_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_launch_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_launch_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_launch_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_launch_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_launch_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_stop> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_stop& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_stop& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_stop& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_stop& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_stop_return> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_stop_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_stop_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_stop_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_stop_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_stop_all> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_stop_all& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop_all& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_stop_all& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_stop_all& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop_all& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_stop_all& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::ModuleLauncher_stop_all_return> {
	void read(TypeInput& in, ::pilot::ModuleLauncher_stop_all_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::ModuleLauncher_stop_all_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::ModuleLauncher_stop_all_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::ModuleLauncher_stop_all_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::ModuleLauncher_stop_all_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::ModuleLauncher_stop_all_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface> {
	void read(TypeInput& in, ::pilot::PlatformInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::PlatformInterface_charge> {
	void read(TypeInput& in, ::pilot::PlatformInterface_charge& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_charge& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_charge& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_charge& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_charge& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_charge& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_charge_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_charge_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_charge_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_charge_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_charge_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_charge_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_charge_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_read_analog_input> {
	void read(TypeInput& in, ::pilot::PlatformInterface_read_analog_input& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_read_analog_input& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_read_analog_input& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_read_analog_input& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_analog_input& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_read_analog_input& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_read_analog_input_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_read_analog_input_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_read_analog_input_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_read_analog_input_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_read_analog_input_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_analog_input_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_read_analog_input_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_read_digital_input> {
	void read(TypeInput& in, ::pilot::PlatformInterface_read_digital_input& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_read_digital_input& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_read_digital_input& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_read_digital_input& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_digital_input& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_read_digital_input& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_read_digital_input_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_read_digital_input_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_read_digital_input_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_read_digital_input_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_read_digital_input_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_read_digital_input_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_read_digital_input_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_digital_output> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_digital_output& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_digital_output& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_digital_output& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_digital_output& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_digital_output& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_digital_output& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_digital_output_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_digital_output_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_digital_output_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_digital_output_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_digital_output_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_digital_output_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_digital_output_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_display_text> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_display_text& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_display_text& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_display_text& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_display_text& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_display_text& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_display_text& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_display_text_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_display_text_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_display_text_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_display_text_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_display_text_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_display_text_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_display_text_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_led> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_led& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_led& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_led& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_led& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_led& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_led& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_led_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_led_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_led_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_led_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_led_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_led_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_led_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_leds> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_leds& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_leds& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_leds& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_leds& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_leds& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_leds& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_leds_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_leds_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_leds_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_leds_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_leds_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_leds_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_leds_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_relay> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_relay& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_relay& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_relay& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_relay& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_relay& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_relay& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_set_relay_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_set_relay_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_set_relay_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_set_relay_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_set_relay_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_set_relay_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_set_relay_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_shutdown> {
	void read(TypeInput& in, ::pilot::PlatformInterface_shutdown& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_shutdown& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_shutdown& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_shutdown& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_shutdown& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_shutdown& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_shutdown_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_shutdown_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_shutdown_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_shutdown_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_shutdown_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_shutdown_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_shutdown_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_start_charging> {
	void read(TypeInput& in, ::pilot::PlatformInterface_start_charging& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_start_charging& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_start_charging& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_start_charging& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_start_charging& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_start_charging& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_start_charging_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_start_charging_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_start_charging_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_start_charging_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_start_charging_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_start_charging_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_start_charging_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_stop_charging> {
	void read(TypeInput& in, ::pilot::PlatformInterface_stop_charging& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_stop_charging& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_stop_charging& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_stop_charging& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_stop_charging& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_stop_charging& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_stop_charging_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_stop_charging_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_stop_charging_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_stop_charging_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_stop_charging_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_stop_charging_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_stop_charging_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_wait_for_digital_input> {
	void read(TypeInput& in, ::pilot::PlatformInterface_wait_for_digital_input& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_wait_for_digital_input& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_wait_for_digital_input& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_wait_for_digital_input& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_wait_for_digital_input& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_wait_for_digital_input& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PlatformInterface_wait_for_digital_input_return> {
	void read(TypeInput& in, ::pilot::PlatformInterface_wait_for_digital_input_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PlatformInterface_wait_for_digital_input_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PlatformInterface_wait_for_digital_input_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PlatformInterface_wait_for_digital_input_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PlatformInterface_wait_for_digital_input_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PlatformInterface_wait_for_digital_input_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::PowerState> {
	void read(TypeInput& in, ::pilot::PowerState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::PowerState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::PowerState& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::PowerState& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::PowerState& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::PowerState& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::RelayBoardData> {
	void read(TypeInput& in, ::pilot::RelayBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::RelayBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::RelayBoardData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::RelayBoardData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::RelayBoardData& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::RelayBoardData& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::RelayBoardV3Data> {
	void read(TypeInput& in, ::pilot::RelayBoardV3Data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::RelayBoardV3Data& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::RelayBoardV3Data& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::RelayBoardV3Data& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::RelayBoardV3Data& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::RelayBoardV3Data& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::SafetyInterface> {
	void read(TypeInput& in, ::pilot::SafetyInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::SafetyInterface& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::SafetyInterface& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::SafetyInterface& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::SafetyInterface& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::SafetyInterface_select_safety_field> {
	void read(TypeInput& in, ::pilot::SafetyInterface_select_safety_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::SafetyInterface_select_safety_field& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::SafetyInterface_select_safety_field& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::SafetyInterface_select_safety_field& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::SafetyInterface_select_safety_field& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::SafetyInterface_select_safety_field& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::SafetyInterface_select_safety_field_return> {
	void read(TypeInput& in, ::pilot::SafetyInterface_select_safety_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::SafetyInterface_select_safety_field_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::SafetyInterface_select_safety_field_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::SafetyInterface_select_safety_field_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::SafetyInterface_select_safety_field_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::SafetyInterface_select_safety_field_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::SafetyState> {
	void read(TypeInput& in, ::pilot::SafetyState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::SafetyState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::SafetyState& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::SafetyState& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::SafetyState& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::SafetyState& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::SystemState> {
	void read(TypeInput& in, ::pilot::SystemState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::SystemState& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::SystemState& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::SystemState& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::SystemState& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::SystemState& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::USBoardData> {
	void read(TypeInput& in, ::pilot::USBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::USBoardData& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::USBoardData& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::USBoardData& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::USBoardData& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::USBoardData& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::battery_code_e> {
	void read(TypeInput& in, ::pilot::battery_code_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::battery_code_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::battery_code_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::battery_code_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::battery_code_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::battery_code_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::battery_type_e> {
	void read(TypeInput& in, ::pilot::battery_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::battery_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::battery_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::battery_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::battery_type_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::battery_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::charging_state_e> {
	void read(TypeInput& in, ::pilot::charging_state_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::charging_state_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::charging_state_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::charging_state_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::charging_state_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::charging_state_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::em_stop_state_e> {
	void read(TypeInput& in, ::pilot::em_stop_state_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::em_stop_state_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::em_stop_state_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::em_stop_state_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::em_stop_state_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::em_stop_state_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::event_t> {
	void read(TypeInput& in, ::pilot::event_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::event_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::event_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::event_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::event_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::event_t& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::event_type_e> {
	void read(TypeInput& in, ::pilot::event_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::event_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::event_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::event_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::event_type_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::event_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::keypad_state_t> {
	void read(TypeInput& in, ::pilot::keypad_state_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::keypad_state_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::keypad_state_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::keypad_state_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::keypad_state_t& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::keypad_state_t& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::kinematic_type_e> {
	void read(TypeInput& in, ::pilot::kinematic_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::kinematic_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::kinematic_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::kinematic_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::kinematic_type_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::kinematic_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::led_color_e> {
	void read(TypeInput& in, ::pilot::led_color_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::led_color_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::led_color_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::led_color_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::led_color_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::led_color_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::permission_e> {
	void read(TypeInput& in, ::pilot::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::permission_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::permission_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::permission_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::permission_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::power_system_type_e> {
	void read(TypeInput& in, ::pilot::power_system_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::power_system_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::power_system_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::power_system_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::power_system_type_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::power_system_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::safety_code_e> {
	void read(TypeInput& in, ::pilot::safety_code_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::safety_code_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::safety_code_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::safety_code_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::safety_code_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::safety_code_e& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::system_error_e> {
	void read(TypeInput& in, ::pilot::system_error_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::system_error_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::system_error_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::system_error_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::system_error_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::system_error_e& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_pilot_PACKAGE_HXX_
