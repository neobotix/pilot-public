
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_PlatformInterface_CLIENT_HXX_
#define INCLUDE_pilot_PlatformInterface_CLIENT_HXX_

#include <vnx/Client.h>
#include <pilot/led_color_e.hxx>


namespace pilot {

class PlatformInterfaceClient : public vnx::Client {
public:
	PlatformInterfaceClient(const std::string& service_name);
	
	PlatformInterfaceClient(vnx::Hash64 service_addr);
	
	void charge();
	
	void charge_async();
	
	void start_charging();
	
	void start_charging_async();
	
	void stop_charging();
	
	void stop_charging_async();
	
	void set_relay(const int32_t& channel = 0, const vnx::bool_t& state = 0);
	
	void set_relay_async(const int32_t& channel = 0, const vnx::bool_t& state = 0);
	
	void set_digital_output(const int32_t& channel = 0, const vnx::bool_t& state = 0);
	
	void set_digital_output_async(const int32_t& channel = 0, const vnx::bool_t& state = 0);
	
	void set_display_text(const std::string& line = "");
	
	void set_display_text_async(const std::string& line = "");
	
	void set_led(const ::pilot::led_color_e& color = ::pilot::led_color_e(), const vnx::float64_t& amount = 0);
	
	void set_led_async(const ::pilot::led_color_e& color = ::pilot::led_color_e(), const vnx::float64_t& amount = 0);
	
	void set_leds(const std::map<::pilot::led_color_e, vnx::float64_t>& led_amount_map = {});
	
	void set_leds_async(const std::map<::pilot::led_color_e, vnx::float64_t>& led_amount_map = {});
	
	vnx::float32_t read_analog_input(const int32_t& channel = 0);
	
	vnx::bool_t read_digital_input(const int32_t& channel = 0);
	
	void wait_for_digital_input(const int32_t& channel = 0, const vnx::bool_t& state = 0);
	
	void wait_for_digital_input_async(const int32_t& channel = 0, const vnx::bool_t& state = 0);
	
	void shutdown();
	
	void shutdown_async();
	
};


} // namespace pilot

#endif // INCLUDE_pilot_PlatformInterface_CLIENT_HXX_
