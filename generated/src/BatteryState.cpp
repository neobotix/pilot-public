
// AUTO GENERATED by vnxcppcodegen

#include <pilot/package.hxx>
#include <pilot/BatteryState.hxx>
#include <pilot/battery_type_e.hxx>
#include <vnx/Value.h>

#include <vnx/vnx.h>


namespace pilot {


const vnx::Hash64 BatteryState::VNX_TYPE_HASH(0xc6790e4d7b66f791ull);
const vnx::Hash64 BatteryState::VNX_CODE_HASH(0xa0861cf50490c370ull);

vnx::Hash64 BatteryState::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string BatteryState::get_type_name() const {
	return "pilot.BatteryState";
}

const vnx::TypeCode* BatteryState::get_type_code() const {
	return pilot::vnx_native_type_code_BatteryState;
}

std::shared_ptr<BatteryState> BatteryState::create() {
	return std::make_shared<BatteryState>();
}

std::shared_ptr<vnx::Value> BatteryState::clone() const {
	return std::make_shared<BatteryState>(*this);
}

void BatteryState::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void BatteryState::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void BatteryState::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = pilot::vnx_native_type_code_BatteryState;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, time);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, remaining);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, voltage);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, current);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, charge);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, capacity);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, design_capacity);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, temperature);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, type);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, module_count);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, serial_number);
	_visitor.type_end(*_type_code);
}

void BatteryState::write(std::ostream& _out) const {
	_out << "{\"__type\": \"pilot.BatteryState\"";
	_out << ", \"time\": "; vnx::write(_out, time);
	_out << ", \"remaining\": "; vnx::write(_out, remaining);
	_out << ", \"voltage\": "; vnx::write(_out, voltage);
	_out << ", \"current\": "; vnx::write(_out, current);
	_out << ", \"charge\": "; vnx::write(_out, charge);
	_out << ", \"capacity\": "; vnx::write(_out, capacity);
	_out << ", \"design_capacity\": "; vnx::write(_out, design_capacity);
	_out << ", \"temperature\": "; vnx::write(_out, temperature);
	_out << ", \"type\": "; vnx::write(_out, type);
	_out << ", \"module_count\": "; vnx::write(_out, module_count);
	_out << ", \"serial_number\": "; vnx::write(_out, serial_number);
	_out << "}";
}

void BatteryState::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object BatteryState::to_object() const {
	vnx::Object _object;
	_object["__type"] = "pilot.BatteryState";
	_object["time"] = time;
	_object["remaining"] = remaining;
	_object["voltage"] = voltage;
	_object["current"] = current;
	_object["charge"] = charge;
	_object["capacity"] = capacity;
	_object["design_capacity"] = design_capacity;
	_object["temperature"] = temperature;
	_object["type"] = type;
	_object["module_count"] = module_count;
	_object["serial_number"] = serial_number;
	return _object;
}

void BatteryState::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "capacity") {
			_entry.second.to(capacity);
		} else if(_entry.first == "charge") {
			_entry.second.to(charge);
		} else if(_entry.first == "current") {
			_entry.second.to(current);
		} else if(_entry.first == "design_capacity") {
			_entry.second.to(design_capacity);
		} else if(_entry.first == "module_count") {
			_entry.second.to(module_count);
		} else if(_entry.first == "remaining") {
			_entry.second.to(remaining);
		} else if(_entry.first == "serial_number") {
			_entry.second.to(serial_number);
		} else if(_entry.first == "temperature") {
			_entry.second.to(temperature);
		} else if(_entry.first == "time") {
			_entry.second.to(time);
		} else if(_entry.first == "type") {
			_entry.second.to(type);
		} else if(_entry.first == "voltage") {
			_entry.second.to(voltage);
		}
	}
}

vnx::Variant BatteryState::get_field(const std::string& _name) const {
	if(_name == "time") {
		return vnx::Variant(time);
	}
	if(_name == "remaining") {
		return vnx::Variant(remaining);
	}
	if(_name == "voltage") {
		return vnx::Variant(voltage);
	}
	if(_name == "current") {
		return vnx::Variant(current);
	}
	if(_name == "charge") {
		return vnx::Variant(charge);
	}
	if(_name == "capacity") {
		return vnx::Variant(capacity);
	}
	if(_name == "design_capacity") {
		return vnx::Variant(design_capacity);
	}
	if(_name == "temperature") {
		return vnx::Variant(temperature);
	}
	if(_name == "type") {
		return vnx::Variant(type);
	}
	if(_name == "module_count") {
		return vnx::Variant(module_count);
	}
	if(_name == "serial_number") {
		return vnx::Variant(serial_number);
	}
	return vnx::Variant();
}

void BatteryState::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "time") {
		_value.to(time);
	} else if(_name == "remaining") {
		_value.to(remaining);
	} else if(_name == "voltage") {
		_value.to(voltage);
	} else if(_name == "current") {
		_value.to(current);
	} else if(_name == "charge") {
		_value.to(charge);
	} else if(_name == "capacity") {
		_value.to(capacity);
	} else if(_name == "design_capacity") {
		_value.to(design_capacity);
	} else if(_name == "temperature") {
		_value.to(temperature);
	} else if(_name == "type") {
		_value.to(type);
	} else if(_name == "module_count") {
		_value.to(module_count);
	} else if(_name == "serial_number") {
		_value.to(serial_number);
	} else {
		throw std::logic_error("no such field: '" + _name + "'");
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const BatteryState& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, BatteryState& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* BatteryState::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> BatteryState::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "pilot.BatteryState";
	type_code->type_hash = vnx::Hash64(0xc6790e4d7b66f791ull);
	type_code->code_hash = vnx::Hash64(0xa0861cf50490c370ull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::pilot::BatteryState);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<BatteryState>(); };
	type_code->depends.resize(1);
	type_code->depends[0] = ::pilot::battery_type_e::static_get_type_code();
	type_code->fields.resize(11);
	{
		auto& field = type_code->fields[0];
		field.data_size = 8;
		field.name = "time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[1];
		field.data_size = 4;
		field.name = "remaining";
		field.code = {9};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 4;
		field.name = "voltage";
		field.code = {9};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "current";
		field.code = {33, 9};
	}
	{
		auto& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "charge";
		field.code = {33, 9};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "capacity";
		field.code = {33, 9};
	}
	{
		auto& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "design_capacity";
		field.code = {33, 9};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 4;
		field.name = "temperature";
		field.code = {9};
	}
	{
		auto& field = type_code->fields[8];
		field.is_extended = true;
		field.name = "type";
		field.code = {19, 0};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 4;
		field.name = "module_count";
		field.value = vnx::to_string(-1);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[10];
		field.is_extended = true;
		field.name = "serial_number";
		field.code = {32};
	}
	type_code->build();
	return type_code;
}


} // namespace pilot


namespace vnx {

void read(TypeInput& in, ::pilot::BatteryState& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[1]) {
			vnx::read_value(_buf + _field->offset, value.remaining, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.voltage, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.temperature, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.module_count, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 3: vnx::read(in, value.current, type_code, _field->code.data()); break;
			case 4: vnx::read(in, value.charge, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.capacity, type_code, _field->code.data()); break;
			case 6: vnx::read(in, value.design_capacity, type_code, _field->code.data()); break;
			case 8: vnx::read(in, value.type, type_code, _field->code.data()); break;
			case 10: vnx::read(in, value.serial_number, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::pilot::BatteryState& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = pilot::vnx_native_type_code_BatteryState;
		out.write_type_code(type_code);
		vnx::write_class_header<::pilot::BatteryState>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(24);
	vnx::write_value(_buf + 0, value.time);
	vnx::write_value(_buf + 8, value.remaining);
	vnx::write_value(_buf + 12, value.voltage);
	vnx::write_value(_buf + 16, value.temperature);
	vnx::write_value(_buf + 20, value.module_count);
	vnx::write(out, value.current, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.charge, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.capacity, type_code, type_code->fields[5].code.data());
	vnx::write(out, value.design_capacity, type_code, type_code->fields[6].code.data());
	vnx::write(out, value.type, type_code, type_code->fields[8].code.data());
	vnx::write(out, value.serial_number, type_code, type_code->fields[10].code.data());
}

void read(std::istream& in, ::pilot::BatteryState& value) {
	value.read(in);
}

void write(std::ostream& out, const ::pilot::BatteryState& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::pilot::BatteryState& value) {
	value.accept(visitor);
}

} // vnx
