
// AUTO GENERATED by vnxcppcodegen

#include <pilot/package.hxx>
#include <pilot/ModuleLauncherClient.hxx>
#include <pilot/ModuleLauncher_add.hxx>
#include <pilot/ModuleLauncher_add_return.hxx>
#include <pilot/ModuleLauncher_get_names.hxx>
#include <pilot/ModuleLauncher_get_names_return.hxx>
#include <pilot/ModuleLauncher_launch.hxx>
#include <pilot/ModuleLauncher_launch_return.hxx>
#include <pilot/ModuleLauncher_stop.hxx>
#include <pilot/ModuleLauncher_stop_return.hxx>
#include <pilot/ModuleLauncher_stop_all.hxx>
#include <pilot/ModuleLauncher_stop_all_return.hxx>
#include <vnx/Object.hpp>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace pilot {

ModuleLauncherClient::ModuleLauncherClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

ModuleLauncherClient::ModuleLauncherClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

void ModuleLauncherClient::launch(const ::vnx::Object& config) {
	auto _method = ::pilot::ModuleLauncher_launch::create();
	_method->config = config;
	vnx_request(_method, false);
}

void ModuleLauncherClient::launch_async(const ::vnx::Object& config) {
	auto _method = ::pilot::ModuleLauncher_launch::create();
	_method->config = config;
	vnx_request(_method, true);
}

void ModuleLauncherClient::add(const ::vnx::Object& config) {
	auto _method = ::pilot::ModuleLauncher_add::create();
	_method->config = config;
	vnx_request(_method, false);
}

void ModuleLauncherClient::add_async(const ::vnx::Object& config) {
	auto _method = ::pilot::ModuleLauncher_add::create();
	_method->config = config;
	vnx_request(_method, true);
}

void ModuleLauncherClient::stop(const std::string& name) {
	auto _method = ::pilot::ModuleLauncher_stop::create();
	_method->name = name;
	vnx_request(_method, false);
}

void ModuleLauncherClient::stop_async(const std::string& name) {
	auto _method = ::pilot::ModuleLauncher_stop::create();
	_method->name = name;
	vnx_request(_method, true);
}

void ModuleLauncherClient::stop_all() {
	auto _method = ::pilot::ModuleLauncher_stop_all::create();
	vnx_request(_method, false);
}

void ModuleLauncherClient::stop_all_async() {
	auto _method = ::pilot::ModuleLauncher_stop_all::create();
	vnx_request(_method, true);
}

std::vector<std::string> ModuleLauncherClient::get_names() {
	auto _method = ::pilot::ModuleLauncher_get_names::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::pilot::ModuleLauncher_get_names_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::string>>();
	} else {
		throw std::logic_error("ModuleLauncherClient: invalid return value");
	}
}


} // namespace pilot
