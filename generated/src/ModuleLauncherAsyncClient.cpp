
// AUTO GENERATED by vnxcppcodegen

#include <pilot/package.hxx>
#include <pilot/ModuleLauncherAsyncClient.hxx>
#include <pilot/ModuleLauncher_add.hxx>
#include <pilot/ModuleLauncher_add_return.hxx>
#include <pilot/ModuleLauncher_get_names.hxx>
#include <pilot/ModuleLauncher_get_names_return.hxx>
#include <pilot/ModuleLauncher_launch.hxx>
#include <pilot/ModuleLauncher_launch_return.hxx>
#include <pilot/ModuleLauncher_stop.hxx>
#include <pilot/ModuleLauncher_stop_return.hxx>
#include <pilot/ModuleLauncher_stop_all.hxx>
#include <pilot/ModuleLauncher_stop_all_return.hxx>
#include <vnx/Object.hpp>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace pilot {

ModuleLauncherAsyncClient::ModuleLauncherAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

ModuleLauncherAsyncClient::ModuleLauncherAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t ModuleLauncherAsyncClient::launch(const ::vnx::Object& config, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::pilot::ModuleLauncher_launch::create();
	_method->config = config;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 0;
		vnx_queue_launch[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t ModuleLauncherAsyncClient::add(const ::vnx::Object& config, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::pilot::ModuleLauncher_add::create();
	_method->config = config;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 1;
		vnx_queue_add[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t ModuleLauncherAsyncClient::stop(const std::string& name, const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::pilot::ModuleLauncher_stop::create();
	_method->name = name;
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 2;
		vnx_queue_stop[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t ModuleLauncherAsyncClient::stop_all(const std::function<void()>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::pilot::ModuleLauncher_stop_all::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 3;
		vnx_queue_stop_all[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

uint64_t ModuleLauncherAsyncClient::get_names(const std::function<void(const std::vector<std::string>&)>& _callback, const std::function<void(const vnx::exception&)>& _error_callback) {
	auto _method = ::pilot::ModuleLauncher_get_names::create();
	const auto _request_id = ++vnx_next_id;
	{
		std::lock_guard<std::mutex> _lock(vnx_mutex);
		vnx_pending[_request_id] = 4;
		vnx_queue_get_names[_request_id] = std::make_pair(_callback, _error_callback);
	}
	vnx_request(_method, _request_id);
	return _request_id;
}

int32_t ModuleLauncherAsyncClient::vnx_purge_request(uint64_t _request_id, const vnx::exception& _ex) {
	std::unique_lock<std::mutex> _lock(vnx_mutex);
	const auto _iter = vnx_pending.find(_request_id);
	if(_iter == vnx_pending.end()) {
		return -1;
	}
	const auto _index = _iter->second;
	vnx_pending.erase(_iter);
	switch(_index) {
		case 0: {
			const auto _iter = vnx_queue_launch.find(_request_id);
			if(_iter != vnx_queue_launch.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_launch.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 1: {
			const auto _iter = vnx_queue_add.find(_request_id);
			if(_iter != vnx_queue_add.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_add.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 2: {
			const auto _iter = vnx_queue_stop.find(_request_id);
			if(_iter != vnx_queue_stop.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_stop.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 3: {
			const auto _iter = vnx_queue_stop_all.find(_request_id);
			if(_iter != vnx_queue_stop_all.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_stop_all.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
		case 4: {
			const auto _iter = vnx_queue_get_names.find(_request_id);
			if(_iter != vnx_queue_get_names.end()) {
				const auto _callback = std::move(_iter->second.second);
				vnx_queue_get_names.erase(_iter);
				_lock.unlock();
				if(_callback) {
					_callback(_ex);
				}
			}
			break;
		}
	}
	return _index;
}

int32_t ModuleLauncherAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) {
	std::unique_lock<std::mutex> _lock(vnx_mutex);
	const auto _iter = vnx_pending.find(_request_id);
	if(_iter == vnx_pending.end()) {
		throw std::runtime_error("ModuleLauncherAsyncClient: received unknown return");
	}
	const auto _index = _iter->second;
	vnx_pending.erase(_iter);
	switch(_index) {
		case 0: {
			const auto _iter = vnx_queue_launch.find(_request_id);
			if(_iter == vnx_queue_launch.end()) {
				throw std::runtime_error("ModuleLauncherAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_launch.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 1: {
			const auto _iter = vnx_queue_add.find(_request_id);
			if(_iter == vnx_queue_add.end()) {
				throw std::runtime_error("ModuleLauncherAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_add.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 2: {
			const auto _iter = vnx_queue_stop.find(_request_id);
			if(_iter == vnx_queue_stop.end()) {
				throw std::runtime_error("ModuleLauncherAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_stop.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 3: {
			const auto _iter = vnx_queue_stop_all.find(_request_id);
			if(_iter == vnx_queue_stop_all.end()) {
				throw std::runtime_error("ModuleLauncherAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_stop_all.erase(_iter);
			_lock.unlock();
			if(_callback) {
				_callback();
			}
			break;
		}
		case 4: {
			const auto _iter = vnx_queue_get_names.find(_request_id);
			if(_iter == vnx_queue_get_names.end()) {
				throw std::runtime_error("ModuleLauncherAsyncClient: callback not found");
			}
			const auto _callback = std::move(_iter->second.first);
			vnx_queue_get_names.erase(_iter);
			_lock.unlock();
			if(_callback) {
				if(auto _result = std::dynamic_pointer_cast<const ::pilot::ModuleLauncher_get_names_return>(_value)) {
					_callback(_result->_ret_0);
				} else if(_value && !_value->is_void()) {
					_callback(_value->get_field_by_index(0).to<std::vector<std::string>>());
				} else {
					throw std::logic_error("ModuleLauncherAsyncClient: invalid return value");
				}
			}
			break;
		}
		default:
			if(_index >= 0) {
				throw std::logic_error("ModuleLauncherAsyncClient: invalid callback index");
			}
	}
	return _index;
}


} // namespace pilot
